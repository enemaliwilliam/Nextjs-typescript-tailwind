// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  active      Boolean    @default(false)
  Template    Template[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

model Folder {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  active      Boolean   @default(false)
  owner       User      @relation(fields: [userId], references: [id])
  userId      Int
  Project     Project[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

model Project {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  isPublic    Boolean @default(false)

  folder          Folder  @relation(fields: [folderId], references: [id])
  folderId        Int
  recent_colors   Json
  recent_fonts    Json
  recent_texts    Json
  recent_elements Json
  Pages           Pages[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

model Pages {
  id                Int     @id @default(autoincrement())
  name              String
  data              Json
  data_json         Json
  project           Project @relation(fields: [projectId], references: [id])
  projectId         Int
  thumbnail_url     String
  thumbnail_svg_url String

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

model Template {
  id            Int            @id @default(autoincrement())
  name          String
  template_type Template_type
  category      Category       @relation(fields: [categoryId], references: [id])
  active        Boolean        @default(false)
  categoryId    Int
  TemplatePage  TemplatePage[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

model TemplatePage {
  id         Int      @id @default(autoincrement())
  name       String
  data       Json
  data_json  Json
  template   Template @relation(fields: [templateId], references: [id])
  templateId Int

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

model Subscriptions {
  id                   Int                 @id @default(autoincrement())
  user                 User                @relation(fields: [userId], references: [id])
  name                 String
  country              String?
  email                String
  product_item         String
  product_title        String?
  product_type         String?
  transaction_amount   Decimal
  transaction_id       String
  transaction_hash     String?
  transaction_method   String
  transaction_time     DateTime
  subscription_gateway SubscriptionGateway
  userId               Int
  createdAt            DateTime            @default(now()) @map(name: "created_at")
  updatedAt            DateTime            @updatedAt @map(name: "updated_at")
}

model User {
  id           Int         @id @default(autoincrement())
  name         String
  email        String      @unique
  account_type AccountType
  createdAt    DateTime    @default(now()) @map(name: "created_at")
  updatedAt    DateTime    @updatedAt @map(name: "updated_at")

  Folder        Folder[]
  Subscriptions Subscriptions[]
  @@map(name: "users")
}

enum AccountType {
  Admin
  MainAccount
  SubAccount
  Trial
}

enum Template_type {
  SINGLE_PAGE
  MULTI_PAGE
  TEXT
  EMOJI
  ELEMENT
}

enum SubscriptionGateway {
  PAYPAL
  JVZOO
  WARRIOR
}
